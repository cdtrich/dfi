import * as Plot from "npm:@observablehq/plot";
import * as d3 from "npm:d3";

export function straightPlotGoal(dfi, goals, goal, { width, height } = {}) {
  // get related commitments for goal
  const data = dfi.filter((d) => d.goal === goal);

  // Get the extent (min and max) of the `value` property
  const [min, max] = d3.extent(data, (d) => d.value);
  const fact = 0.05; // factor to subtract/add to range

  // Round down the min and round up the max
  const roundedMinMax = [
    Math.floor(min) - min * fact,
    Math.ceil(max) + max * fact,
  ];

  // window height
  const vw = window.innerWidth;
  const vh = window.innerHeight;
  const factor = data.length;

  const plot = Plot.plot({
    width: width,
    height: height,
    axis: null,
    x: { label: null, domain: roundedMinMax },
    y: { label: null, text: null, axis: "left", ticks: [], tickSize: 0 },
    marginRight: 4,
    color: {
      legend: false,
      range: ["#32baa7", "#ceeae4", "#fff200", "#e6b95e", "#e87461"],
    },
    r: { range: [vw / 200, vw / 100] },
    facet: {
      label: null,
    },
    marks: [
      // all dots
      Plot.dot(
        data,
        Plot.dodgeY("top", {
          x: "value",
          y: 0,
          // fy: 0,
          href: (d) => "." + d.country_url,
          fill: "pillar",
          r: (d) => d.value,
          padding: vh / 200,
          stroke: "#3c4099",
          strokeWidth: vh / 200,
          sort: "NAME_ENGL",
          tip: true,
          channels: { commitment_txt: "commitment_txt" }, // Assign `commitment_txt` as a data attribute for the dots
          title: (d) =>
            [
              [
                [[d.NAME_ENGL, d.commitment_txt].join("\n\n")],
                Math.round(d.value),
              ].join(": "),
              d.pillar,
            ].join("\n"),
        })
      ),
      Plot.axisX({ facetAnchor: "top", anchor: "top" }),
    ],
  });

  const svg = d3.select(plot); // Select the SVG element generated by Plot

  // After rendering the plot, add the `data-commitment-txt` attribute to the <circle> elements
  svg.selectAll("circle").each(function (d) {
    const circle = d3.select(this);
    circle.attr("data-commitment-txt", d.commitment_txt); // Add the custom data attribute
  });

  // Add hover functionality to the circle elements
  svg
    .selectAll("circle")
    .on("mouseover", function (event, d) {
      const commitmentTxt = d3.select(this).attr("data-commitment-txt"); // Access `commitment_txt` from the circle element

      // Highlight all circles with the same commitment_txt
      svg
        .selectAll("circle")
        .filter(function () {
          return d3.select(this).attr("data-commitment-txt") === commitmentTxt;
        })
        .attr("opacity", 1); // Change opacity to highlight
      svg.selectAll("circle").filter(function () {
        return d3.select(this).attr("data-commitment-txt") !== commitmentTxt;
      });
    })
    .on("mouseout", function () {
      // Reset all circles to original style
      // svg.selectAll("circle").attr("opacity", 0.2); // reset opacity
    });

  return plot;
}
